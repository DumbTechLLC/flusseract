// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flusseract.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FlusseractBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlusseractBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlusseractBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Set the logger to be used by the library
  void setLogger(
    ffi.Pointer<logger_t> arg0,
  ) {
    return _setLogger(
      arg0,
    );
  }

  late final _setLoggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<logger_t>)>>(
          'setLogger');
  late final _setLogger =
      _setLoggerPtr.asFunction<void Function(ffi.Pointer<logger_t>)>();

  tess_api_ptr_t Create() {
    return _Create();
  }

  late final _CreatePtr =
      _lookup<ffi.NativeFunction<tess_api_ptr_t Function()>>('Create');
  late final _Create = _CreatePtr.asFunction<tess_api_ptr_t Function()>();

  void Destroy(
    tess_api_ptr_t arg0,
  ) {
    return _Destroy(
      arg0,
    );
  }

  late final _DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(tess_api_ptr_t)>>('Destroy');
  late final _Destroy = _DestroyPtr.asFunction<void Function(tess_api_ptr_t)>();

  ffi.Pointer<ffi.Char> Version(
    tess_api_ptr_t arg0,
  ) {
    return _Version(
      arg0,
    );
  }

  late final _VersionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(tess_api_ptr_t)>>(
      'Version');
  late final _Version =
      _VersionPtr.asFunction<ffi.Pointer<ffi.Char> Function(tess_api_ptr_t)>();

  ffi.Pointer<ffi.Char> GetDataPath() {
    return _GetDataPath();
  }

  late final _GetDataPathPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetDataPath');
  late final _GetDataPath =
      _GetDataPathPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int Init(
    tess_api_ptr_t arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _Init(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _InitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(tess_api_ptr_t, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('Init');
  late final _Init = _InitPtr.asFunction<
      int Function(tess_api_ptr_t, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void Clear(
    tess_api_ptr_t arg0,
  ) {
    return _Clear(
      arg0,
    );
  }

  late final _ClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(tess_api_ptr_t)>>('Clear');
  late final _Clear = _ClearPtr.asFunction<void Function(tess_api_ptr_t)>();

  void ClearPersistentCache(
    tess_api_ptr_t arg0,
  ) {
    return _ClearPersistentCache(
      arg0,
    );
  }

  late final _ClearPersistentCachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(tess_api_ptr_t)>>(
          'ClearPersistentCache');
  late final _ClearPersistentCache =
      _ClearPersistentCachePtr.asFunction<void Function(tess_api_ptr_t)>();

  int GetPageSegMode(
    tess_api_ptr_t arg0,
  ) {
    return _GetPageSegMode(
      arg0,
    );
  }

  late final _GetPageSegModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(tess_api_ptr_t)>>(
          'GetPageSegMode');
  late final _GetPageSegMode =
      _GetPageSegModePtr.asFunction<int Function(tess_api_ptr_t)>();

  void SetPageSegMode(
    tess_api_ptr_t arg0,
    int arg1,
  ) {
    return _SetPageSegMode(
      arg0,
      arg1,
    );
  }

  late final _SetPageSegModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(tess_api_ptr_t, ffi.Int)>>(
          'SetPageSegMode');
  late final _SetPageSegMode =
      _SetPageSegModePtr.asFunction<void Function(tess_api_ptr_t, int)>();

  bool SetVariable(
    tess_api_ptr_t arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _SetVariable(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetVariablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(tess_api_ptr_t, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('SetVariable');
  late final _SetVariable = _SetVariablePtr.asFunction<
      bool Function(
          tess_api_ptr_t, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void SetPixImage(
    tess_api_ptr_t arg0,
    pix_image_ptr_t arg1,
  ) {
    return _SetPixImage(
      arg0,
      arg1,
    );
  }

  late final _SetPixImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(tess_api_ptr_t, pix_image_ptr_t)>>('SetPixImage');
  late final _SetPixImage = _SetPixImagePtr.asFunction<
      void Function(tess_api_ptr_t, pix_image_ptr_t)>();

  ffi.Pointer<ffi.Char> UTF8Text(
    tess_api_ptr_t arg0,
  ) {
    return _UTF8Text(
      arg0,
    );
  }

  late final _UTF8TextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(tess_api_ptr_t)>>(
      'UTF8Text');
  late final _UTF8Text =
      _UTF8TextPtr.asFunction<ffi.Pointer<ffi.Char> Function(tess_api_ptr_t)>();

  ffi.Pointer<ffi.Char> HOCRText(
    tess_api_ptr_t arg0,
  ) {
    return _HOCRText(
      arg0,
    );
  }

  late final _HOCRTextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(tess_api_ptr_t)>>(
      'HOCRText');
  late final _HOCRText =
      _HOCRTextPtr.asFunction<ffi.Pointer<ffi.Char> Function(tess_api_ptr_t)>();

  ffi.Pointer<bounding_boxes> GetBoundingBoxes(
    tess_api_ptr_t arg0,
    int arg1,
  ) {
    return _GetBoundingBoxes(
      arg0,
      arg1,
    );
  }

  late final _GetBoundingBoxesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<bounding_boxes> Function(
              tess_api_ptr_t, ffi.Int)>>('GetBoundingBoxes');
  late final _GetBoundingBoxes = _GetBoundingBoxesPtr.asFunction<
      ffi.Pointer<bounding_boxes> Function(tess_api_ptr_t, int)>();

  ffi.Pointer<bounding_boxes> GetBoundingBoxesVerbose(
    tess_api_ptr_t arg0,
  ) {
    return _GetBoundingBoxesVerbose(
      arg0,
    );
  }

  late final _GetBoundingBoxesVerbosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<bounding_boxes> Function(
              tess_api_ptr_t)>>('GetBoundingBoxesVerbose');
  late final _GetBoundingBoxesVerbose = _GetBoundingBoxesVerbosePtr.asFunction<
      ffi.Pointer<bounding_boxes> Function(tess_api_ptr_t)>();

  pix_image_ptr_t CreatePixImageByFilePath(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _CreatePixImageByFilePath(
      arg0,
    );
  }

  late final _CreatePixImageByFilePathPtr = _lookup<
          ffi.NativeFunction<pix_image_ptr_t Function(ffi.Pointer<ffi.Char>)>>(
      'CreatePixImageByFilePath');
  late final _CreatePixImageByFilePath = _CreatePixImageByFilePathPtr
      .asFunction<pix_image_ptr_t Function(ffi.Pointer<ffi.Char>)>();

  pix_image_ptr_t CreatePixImageFromBytes(
    ffi.Pointer<ffi.Uint8> arg0,
    int arg1,
  ) {
    return _CreatePixImageFromBytes(
      arg0,
      arg1,
    );
  }

  late final _CreatePixImageFromBytesPtr = _lookup<
      ffi.NativeFunction<
          pix_image_ptr_t Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('CreatePixImageFromBytes');
  late final _CreatePixImageFromBytes = _CreatePixImageFromBytesPtr.asFunction<
      pix_image_ptr_t Function(ffi.Pointer<ffi.Uint8>, int)>();

  int GetPixImageWidth(
    pix_image_ptr_t arg0,
  ) {
    return _GetPixImageWidth(
      arg0,
    );
  }

  late final _GetPixImageWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(pix_image_ptr_t)>>(
          'GetPixImageWidth');
  late final _GetPixImageWidth =
      _GetPixImageWidthPtr.asFunction<int Function(pix_image_ptr_t)>();

  int GetPixImageHeight(
    pix_image_ptr_t arg0,
  ) {
    return _GetPixImageHeight(
      arg0,
    );
  }

  late final _GetPixImageHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(pix_image_ptr_t)>>(
          'GetPixImageHeight');
  late final _GetPixImageHeight =
      _GetPixImageHeightPtr.asFunction<int Function(pix_image_ptr_t)>();

  void DestroyPixImage(
    pix_image_ptr_t arg0,
  ) {
    return _DestroyPixImage(
      arg0,
    );
  }

  late final _DestroyPixImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(pix_image_ptr_t)>>(
          'DestroyPixImage');
  late final _DestroyPixImage =
      _DestroyPixImagePtr.asFunction<void Function(pix_image_ptr_t)>();
}

final class logger_t extends ffi.Struct {
  @ffi.Int64()
  external int context;

  external log_t log;
}

/// Client interface for logging
/// messages from C/C++ code
typedef log_t = ffi.Pointer<ffi.NativeFunction<log_tFunction>>;
typedef log_tFunction = ffi.Void Function(
    ffi.Int64, ffi.Int, ffi.Pointer<ffi.Char>);
typedef Dartlog_tFunction = void Function(int, int, ffi.Pointer<ffi.Char>);

final class bounding_box extends ffi.Struct {
  @ffi.Int()
  external int x1;

  @ffi.Int()
  external int y1;

  @ffi.Int()
  external int x2;

  @ffi.Int()
  external int y2;

  external ffi.Pointer<ffi.Char> word;

  @ffi.Float()
  external double confidence;

  @ffi.Int()
  external int block_num;

  @ffi.Int()
  external int par_num;

  @ffi.Int()
  external int line_num;

  @ffi.Int()
  external int word_num;
}

final class bounding_boxes extends ffi.Struct {
  @ffi.Int()
  external int length;

  external ffi.Pointer<bounding_box> boxes;
}

typedef tess_api_ptr_t = ffi.Pointer<ffi.Void>;
typedef pix_image_ptr_t = ffi.Pointer<ffi.Void>;

const int BUFFER_SIZE = 4096;
